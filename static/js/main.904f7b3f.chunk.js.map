{"version":3,"sources":["components/PostsList.tsx","utils/fetchClient.ts","components/Loader/Loader.tsx","components/NewCommentForm.tsx","components/PostDetails.tsx","components/UserSelector.tsx","App.tsx","index.tsx"],"names":["PostsList","posts","onOpen","selectedPostId","handleOpen","useCallback","postId","className","map","id","title","type","onClick","classNames","BASE_URL","wait","delay","Promise","resolve","setTimeout","request","url","method","data","options","body","JSON","stringify","headers","then","fetch","response","json","client","Loader","NewCommentForm","onUpdate","useState","name","setName","email","setEmail","setBody","hasError","setHasError","isSending","setIsSendign","checkOnError","field","length","handleClear","onSubmit","event","preventDefault","newComment","finally","htmlFor","placeholder","value","onChange","target","PostDetails","post","comments","setComments","isLoading","setIsLoading","isFormOpen","setIsFormOpen","getComments","commentsFromServer","catch","useEffect","openFormHandler","prevValue","handleDelete","commentId","filter","el","comment","href","UserSelector","getPosts","onUserChange","setSelectedPostId","selectedUserId","users","setUsers","isOpen","setIsOpen","wrapperRef","useRef","usersFromServer","handleClickOutside","current","contains","document","addEventListener","removeEventListener","handleSelect","user","selectedUserName","find","ref","role","App","setPosts","setSelectedUserId","userId","postsFromServer","selectedPost","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.904f7b3f.chunk.js","sourcesContent":["import classNames from 'classnames';\nimport React, { useCallback } from 'react';\nimport { Post } from '../types/Post';\n\ninterface Props {\n  posts: Post[];\n  onOpen: (newPost: number | null) => void;\n  selectedPostId: number | null;\n}\n\nexport const PostsList: React.FC<Props> = ({\n  posts,\n  onOpen,\n  selectedPostId,\n}) => {\n  const handleOpen = useCallback((postId: number) => {\n    if (selectedPostId === postId) {\n      onOpen(null);\n    } else {\n      onOpen(postId);\n    }\n  }, [selectedPostId]);\n\n  return (\n    <div data-cy=\"PostsList\">\n      <p className=\"title\">Posts:</p>\n\n      <table className=\"table is-fullwidth is-striped is-hoverable is-narrow\">\n        <thead>\n          <tr className=\"has-background-link-light\">\n            <th>#</th>\n            <th>Title</th>\n            <th> </th>\n          </tr>\n        </thead>\n\n        <tbody>\n          {posts.map(({ id, title }) => (\n            <tr data-cy=\"Post\" key={id}>\n              <td data-cy=\"PostId\">{id}</td>\n\n              <td data-cy=\"PostTitle\">\n                {title}\n              </td>\n\n              <td className=\"has-text-right is-vcentered\">\n                <button\n                  type=\"button\"\n                  data-cy=\"PostButton\"\n                  onClick={() => handleOpen(id)}\n                  className={classNames('button is-link',\n                    { 'is-light': selectedPostId !== id })}\n                >\n                  {id === selectedPostId\n                    ? 'Close'\n                    : 'Open'}\n                </button>\n              </td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </div>\n  );\n};\n","import { CommentData } from '../types/Comment';\n\nconst BASE_URL = 'https://mate.academy/students-api';\n\n// a promise resolved after a given delay\nfunction wait(delay: number) {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\n// To have autocompletion and avoid mistypes\ntype RequestMethod = 'GET' | 'POST' | 'PATCH' | 'DELETE';\n\nfunction request<T>(\n  url: string,\n  method: RequestMethod = 'GET',\n  data: CommentData | null = null, // we can send any data to the server\n): Promise<T> {\n  const options: RequestInit = { method };\n\n  if (data) {\n    // We add body and Content-Type only for the requests with data\n    options.body = JSON.stringify(data);\n    options.headers = {\n      'Content-Type': 'application/json; charset=UTF-8',\n    };\n  }\n\n  // for a demo purpose we emulate a delay to see if Loaders work\n  return wait(300)\n    .then(() => fetch(BASE_URL + url, options))\n    .then(response => response.json());\n}\n\nexport const client = {\n  get: <T>(url: string) => request<T>(url),\n  post: <T>(url: string, data: CommentData) => request<T>(url, 'POST', data),\n  patch: <T>(url: string, data: CommentData) => request<T>(url, 'PATCH', data),\n  delete: (url: string) => request(url, 'DELETE'),\n};\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import classNames from 'classnames';\nimport React, { FormEvent, useCallback, useState } from 'react';\nimport { CommentData } from '../types/Comment';\nimport { client } from '../utils/fetchClient';\n\ninterface Props {\n  postId: number;\n  onUpdate: () => void;\n}\n\nexport const NewCommentForm: React.FC<Props> = ({ postId, onUpdate }) => {\n  const [name, setName] = useState('');\n  const [email, setEmail] = useState('');\n  const [body, setBody] = useState('');\n  const [hasError, setHasError] = useState(false);\n  const [isSending, setIsSendign] = useState(false);\n\n  const checkOnError = useCallback((field: string) => (\n    !field.length && hasError\n  ), [hasError]);\n\n  const handleSubmit = (event: FormEvent) => {\n    event.preventDefault();\n\n    if (!name.length || !email.length || !body.length) {\n      setHasError(true);\n    } else {\n      const newComment = {\n        postId,\n        name,\n        email,\n        body,\n      };\n\n      setIsSendign(true);\n      client.post<CommentData>('/comments', newComment)\n        .finally(() => {\n          setIsSendign(false);\n          setBody('');\n          onUpdate();\n          setHasError(false);\n        });\n    }\n  };\n\n  const handleClear = useCallback(() => {\n    setName('');\n    setEmail('');\n    setBody('');\n    setHasError(false);\n  }, []);\n\n  return (\n    <form data-cy=\"NewCommentForm\" onSubmit={handleSubmit}>\n      <div className=\"field\" data-cy=\"NameField\">\n        <label className=\"label\" htmlFor=\"comment-author-name\">\n          Author Name\n        </label>\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"name\"\n            id=\"comment-author-name\"\n            placeholder=\"Name Surname\"\n            className={classNames('input',\n              { 'is-danger': checkOnError(name) })}\n            value={name}\n            onChange={event => setName(event.target.value)}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-user\" />\n          </span>\n\n          {checkOnError(name) && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n        </div>\n\n        {checkOnError(name) && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Name is required\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"EmailField\">\n        <label className=\"label\" htmlFor=\"comment-author-email\">\n          Author Email\n        </label>\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"email\"\n            id=\"comment-author-email\"\n            placeholder=\"email@test.com\"\n            className={classNames('input',\n              { 'is-danger': checkOnError(email) })}\n            value={email}\n            onChange={event => setEmail(event.target.value)}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-envelope\" />\n          </span>\n\n          {checkOnError(email) && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n        </div>\n\n        {checkOnError(email) && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Email is required\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"BodyField\">\n        <label className=\"label\" htmlFor=\"comment-body\">\n          Comment Text\n        </label>\n        <div className=\"control\">\n          <textarea\n            id=\"comment-body\"\n            name=\"body\"\n            placeholder=\"Type comment here\"\n            className={classNames('textarea',\n              { 'is-danger': checkOnError(body) })}\n            value={body}\n            onChange={event => setBody(event.target.value)}\n          />\n        </div>\n\n        {checkOnError(body) && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Enter some text\n          </p>\n        )}\n      </div>\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            type=\"submit\"\n            className={classNames('button is-link',\n              { 'is-loading': isSending })}\n          >\n            Add\n          </button>\n        </div>\n\n        <div className=\"control\">\n          {/* eslint-disable-next-line react/button-has-type */}\n          <button\n            type=\"reset\"\n            className=\"button is-link is-light\"\n            onClick={handleClear}\n          >\n            Clear\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n};\n","import React, { useCallback, useEffect, useState } from 'react';\nimport { Comment } from '../types/Comment';\nimport { Post } from '../types/Post';\nimport { client } from '../utils/fetchClient';\nimport { Loader } from './Loader';\nimport { NewCommentForm } from './NewCommentForm';\n\ninterface Props {\n  post: Post;\n}\n\nexport const PostDetails: React.FC<Props> = ({ post }) => {\n  const [hasError, setHasError] = useState(false);\n  const [comments, setComments] = useState<Comment[]>([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [isFormOpen, setIsFormOpen] = useState(false);\n\n  const getComments = useCallback(() => {\n    setIsLoading(true);\n    client.get<Comment[]>(`/comments?postId=${post?.id}`)\n      .then(commentsFromServer => {\n        setComments(commentsFromServer);\n        setHasError(false);\n      })\n      .catch(() => setHasError(true))\n      .finally(() => setIsLoading(false));\n  }, [post]);\n\n  useEffect(() => {\n    setIsFormOpen(false);\n    getComments();\n  }, [post]);\n\n  const openFormHandler = useCallback(() => {\n    setIsFormOpen(prevValue => !prevValue);\n  }, []);\n\n  const handleDelete = useCallback((commentId: number) => {\n    client.delete(`/comments/${commentId}`);\n    setComments(prevValue => prevValue.filter(el => el.id !== commentId));\n  }, []);\n\n  return (\n    <div className=\"content\" data-cy=\"PostDetails\">\n      <div className=\"content\" data-cy=\"PostDetails\">\n        <div className=\"block\">\n          <h2 data-cy=\"PostTitle\">\n            {`#${post?.id}: ${post?.title}`}\n          </h2>\n\n          <p data-cy=\"PostBody\">\n            {post?.body}\n          </p>\n        </div>\n\n        {!isLoading\n          ? (\n            <div className=\"block\">\n\n              {hasError && (\n                <div className=\"notification is-danger\" data-cy=\"CommentsError\">\n                  Something went wrong\n                </div>\n              )}\n\n              {!hasError && (!comments.length\n                ? (\n                  <p className=\"title is-4\" data-cy=\"NoCommentsMessage\">\n                    No comments yet\n                  </p>\n                )\n                : (<p className=\"title is-4\">Comments:</p>))}\n\n              {comments.map(comment => (\n                <article\n                  className=\"message is-small\"\n                  data-cy=\"Comment\"\n                  key={comment.id}\n                >\n                  <div className=\"message-header\">\n                    <a href={`mailto:${comment.email}`} data-cy=\"CommentAuthor\">\n                      {comment.name}\n                    </a>\n                    <button\n                      data-cy=\"CommentDelete\"\n                      type=\"button\"\n                      className=\"delete is-small\"\n                      aria-label=\"delete\"\n                      onClick={() => handleDelete(comment.id)}\n                    >\n                      delete button\n                    </button>\n                  </div>\n\n                  <div className=\"message-body\" data-cy=\"CommentBody\">\n                    {comment.body}\n                  </div>\n                </article>\n              ))}\n\n              {!isFormOpen && !hasError && (\n                <button\n                  data-cy=\"WriteCommentButton\"\n                  type=\"button\"\n                  className=\"button is-link\"\n                  onClick={openFormHandler}\n                >\n                  Write a comment\n                </button>\n              )}\n            </div>\n          )\n          : (<Loader />)}\n\n        {isFormOpen && (\n          <NewCommentForm\n            postId={post.id}\n            onUpdate={getComments}\n          />\n        )}\n      </div>\n    </div>\n  );\n};\n","import React, {\n  useCallback,\n  useEffect,\n  useRef,\n  useState,\n} from 'react';\nimport { User } from '../types/User';\nimport { client } from '../utils/fetchClient';\n\ninterface Props {\n  getPosts: (userId: number) => void;\n  onUserChange: (newValue: null) => void;\n  setSelectedPostId: (newValue: null) => void;\n  selectedUserId: number | null;\n}\n\nexport const UserSelector: React.FC<Props> = ({\n  getPosts,\n  onUserChange,\n  setSelectedPostId,\n  selectedUserId,\n}) => {\n  const [users, setUsers] = useState<User[]>([]);\n  const [isOpen, setIsOpen] = useState(false);\n  const wrapperRef = useRef<HTMLDivElement>(null);\n\n  useEffect(() => {\n    client.get<User[]>('/users')\n      .then(usersFromServer => setUsers(usersFromServer));\n\n    const handleClickOutside = (event : MouseEvent) => {\n      if (wrapperRef.current\n        && !wrapperRef.current.contains(event.target as HTMLElement)) {\n        setIsOpen(false);\n      }\n    };\n\n    document.addEventListener('click', handleClickOutside);\n\n    return () => {\n      document.removeEventListener('click', handleClickOutside);\n    };\n  }, []);\n\n  const handleOpen = useCallback(() => {\n    setIsOpen(prevValue => !prevValue);\n  }, []);\n\n  const handleSelect = useCallback((user) => {\n    const { id } = user;\n\n    if (id !== selectedUserId) {\n      onUserChange(id);\n      getPosts(id);\n      setSelectedPostId(null);\n    }\n\n    setIsOpen(false);\n  }, [selectedUserId]);\n\n  const selectedUserName = users.find(({ id }) => id === selectedUserId)?.name;\n\n  return (\n    <div\n      data-cy=\"UserSelector\"\n      className=\"dropdown is-active\"\n      ref={wrapperRef}\n    >\n      <div className=\"dropdown-trigger\">\n        <button\n          type=\"button\"\n          className=\"button\"\n          aria-haspopup=\"true\"\n          aria-controls=\"dropdown-menu\"\n          onClick={handleOpen}\n        >\n          <span>{selectedUserName || 'Choose a user'}</span>\n\n          <span className=\"icon is-small\">\n            <i className=\"fas fa-angle-down\" aria-hidden=\"true\" />\n          </span>\n        </button>\n      </div>\n\n      {isOpen && (\n        <div className=\"dropdown-menu\" id=\"dropdown-menu\" role=\"menu\">\n          <div className=\"dropdown-content\">\n            {users.map(user => (\n              <a\n                href={`#user-${user.id}`}\n                className=\"dropdown-item\"\n                key={user.id}\n                onClick={() => handleSelect(user)}\n              >\n                {user.name}\n              </a>\n            ))}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n","import React, { useCallback, useState } from 'react';\nimport 'bulma/bulma.sass';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport './App.scss';\n\nimport classNames from 'classnames';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { UserSelector } from './components/UserSelector';\nimport { Loader } from './components/Loader';\n\nimport { client } from './utils/fetchClient';\nimport { Post } from './types/Post';\n\nexport const App: React.FC = () => {\n  const [posts, setPosts] = useState<Post[]>([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [hasError, setHasError] = useState(false);\n  const [selectedPostId, setSelectedPostId] = useState<number | null>(null);\n  const [selectedUserId, setSelectedUserId] = useState<number | null>(null);\n\n  const getPosts = useCallback((userId: number) => {\n    setIsLoading(true);\n    client.get<Post[]>(`/posts?userId=${userId}`)\n      .then(postsFromServer => {\n        setPosts(postsFromServer);\n        setHasError(false);\n      })\n      .catch(() => setHasError(true))\n      .finally(() => setIsLoading(false));\n  }, []);\n\n  const selectedPost = posts.find(({ id }) => id === selectedPostId);\n\n  return (\n    <main className=\"section\">\n      <div className=\"container\">\n        <div className=\"tile is-ancestor\">\n          <div className=\"tile is-parent\">\n            <div className=\"tile is-child box is-success\">\n              <div className=\"block\">\n                <UserSelector\n                  getPosts={getPosts}\n                  selectedUserId={selectedUserId}\n                  onUserChange={setSelectedUserId}\n                  setSelectedPostId={setSelectedPostId}\n                />\n              </div>\n\n              <div className=\"block\" data-cy=\"MainContent\">\n                {selectedUserId === null && (\n                  <p data-cy=\"NoSelectedUser\">\n                    No user selected\n                  </p>\n                )}\n\n                {hasError && (\n                  <div\n                    className=\"notification is-danger\"\n                    data-cy=\"PostsLoadingError\"\n                  >\n                    Something went wrong!\n                  </div>\n                )}\n\n                {isLoading && <Loader />}\n\n                {posts.length > 0 && !isLoading && (\n                  <PostsList\n                    posts={posts}\n                    onOpen={setSelectedPostId}\n                    selectedPostId={selectedPostId}\n                  />\n                )}\n\n                {posts.length === 0 && selectedUserId !== null\n                && !isLoading && (\n                  <div className=\"notification is-warning\" data-cy=\"NoPostsYet\">\n                    No posts yet\n                  </div>\n                )}\n              </div>\n            </div>\n          </div>\n          <div\n            data-cy=\"Sidebar\"\n            className={classNames(\n              'tile',\n              'is-parent',\n              'is-8-desktop',\n              'Sidebar',\n              { 'Sidebar--open': selectedPostId !== null },\n            )}\n          >\n            <div className=\"tile is-child box is-success \">\n              {selectedPost && (<PostDetails post={selectedPost} />)}\n            </div>\n          </div>\n        </div>\n      </div>\n    </main>\n  );\n};\n","import ReactDOM from 'react-dom';\n\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}